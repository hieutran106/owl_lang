// statement
program        → declaration* EOF ;

declaration    → varDecl
               | functionDecl
               | statement ;

varDecl        → "var" IDENTIFIER ( "=" expression )? ";" ;

functionDecl   → "fun" function;
function       → IDENTIFIER "(" parameters? ")" block;

statement      → exprStmt
               | ifStmt
               | printStmt
               | whileStmt
               | forStmt
               | blockStmt ;

exprStmt       → expression ";" ;
ifStmt         → "if" "(" expression ")" statement ( "else" statement )? ;
printStmt      → "print" expression ";" ;
whileStmt      → "while" "(" expression ")" statement ;
forStmt        → "for" "(" ( varDecl | exprStmt | ";" )
                 expression? ";"
                 expression? ")" statement ;
block          → "{" declaration* "}" ;

// expression
expression     → assignment ;
assignment     → IDENTIFIER "=" assignment
               | logical_or ;
logical_or     → logical_and ( "or" logical_and )* ;
logical_and    → equality ( "and" equality )* ;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" ) factor )* ;
factor         → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary
               | function_call ;
function_call  → primary ( "(" arguments? ")" )* ;
arguments      → expression ( "," expression )* ;
primary        → NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")"
               | IDENTIFIER ;